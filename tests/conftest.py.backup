"""Test configuration and fixtures."""

import asyncio
import os
import pytest
from unittest.mock import Mock, AsyncMock
from typing import AsyncGenerator

import pytest_asyncio
from sqlalchemy import create_engine
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from fastapi.testclient import TestClient

# Set test environment
os.environ["ENVIRONMENT"] = "test"
os.environ["DATABASE_URL"] = "sqlite+aiosqlite:///./test.db"
os.environ["TEST_DATABASE_URL"] = "sqlite+aiosqlite:///./test.db"

from src.config.settings import get_settings
from src.api.app import create_app
from src.database.connection import get_db
from src.models.base import Base


@pytest.fixture(scope="session")
def event_loop():
    """Create an instance of the default event loop for the test session."""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()


@pytest_asyncio.fixture(scope="session")
async def async_engine():
    """Create async database engine for testing."""
    settings = get_settings()
    engine = create_async_engine(
        settings.TEST_DATABASE_URL,
        echo=False,
        pool_pre_ping=True,
    )
    
    # Create tables
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    yield engine
    
    # Drop tables
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
    
    await engine.dispose()


@pytest_asyncio.fixture
async def async_session(async_engine):
    """Create async database session for testing."""
    async_session_maker = async_sessionmaker(
        bind=async_engine,
        class_=AsyncSession,
        expire_on_commit=False,
    )
    
    async with async_session_maker() as session:
        yield session
        await session.rollback()


@pytest.fixture
def mock_settings():
    """Mock settings for testing."""
    settings = Mock()
    settings.ENVIRONMENT = "test"
    settings.DATABASE_URL = "sqlite+aiosqlite:///./test.db"
    settings.SECRET_KEY = "test-secret-key"
    settings.API_HOST = "localhost"
    settings.API_PORT = 8000
    settings.ALLOWED_ORIGINS = ["http://localhost:3000"]
    settings.LOG_LEVEL = "INFO"
    settings.OPENAI_API_KEY = "test-openai-key"
    settings.PIPEDRIVE_API_TOKEN = "test-pipedrive-token"
    settings.PIPEDRIVE_BASE_URL = "https://api.pipedrive.com/v1"
    return settings


@pytest.fixture
def app(mock_settings):
    """Create FastAPI test app."""
    # Override settings
    from src.config import settings as settings_module
    settings_module._settings = mock_settings
    
    # Create app
    app = create_app()
    
    # Override database dependency
    async def override_get_db():
        # Mock database session
        mock_session = AsyncMock()
        yield mock_session
    
    app.dependency_overrides[get_db] = override_get_db
    
    return app


@pytest.fixture
def client(app):
    """Create test client."""
    return TestClient(app)


@pytest.fixture
def mock_openai_client():
    """Mock OpenAI client."""
    client = AsyncMock()
    client.chat.completions.create = AsyncMock()
    return client


@pytest.fixture
def mock_pipedrive_client():
    """Mock Pipedrive client."""
    client = AsyncMock()
    client.get_person = AsyncMock()
    client.create_person = AsyncMock()
    client.update_person = AsyncMock()
    client.get_deal = AsyncMock()
    client.create_deal = AsyncMock()
    client.update_deal = AsyncMock()
    return client


@pytest.fixture
def sample_plaintiff_data():
    """Sample plaintiff data for testing."""
    return {
        "first_name": "John",
        "last_name": "Doe",
        "email": "john.doe@example.com",
        "phone": "+1234567890",
        "address": "123 Main St",
        "city": "New York",
        "state": "NY",
        "zip_code": "10001",
        "case_type": "personal_injury",
        "accident_date": "2024-01-15",
        "attorney_name": "Jane Smith",
        "law_firm_name": "Smith & Associates",
    }


@pytest.fixture
def sample_case_data():
    """Sample case data for testing."""
    return {
        "case_number": "CASE-2024-001",
        "case_type": "personal_injury",
        "status": "active",
        "accident_date": "2024-01-15",
        "settlement_amount_requested": 50000.00,
        "description": "Car accident case",
        "attorney_name": "Jane Smith",
        "law_firm_name": "Smith & Associates",
    }


@pytest.fixture
def sample_document_data():
    """Sample document data for testing."""
    return {
        "title": "Medical Records",
        "document_type": "medical",
        "file_path": "/documents/medical_records.pdf",
        "file_size": 1024000,
        "mime_type": "application/pdf",
        "extracted_text": "Patient: John Doe\nDiagnosis: Whiplash",
        "metadata": {"pages": 5, "scanned": True},
    }