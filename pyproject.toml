[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-crm-multi-agent"
version = "0.1.0"
description = "AI-Powered CRM Multi-Agent System for Pre-Settlement Funding"
readme = "README.md"
authors = [
    {name = "AI CRM Team", email = "team@aicrm.com"},
]
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["crm", "ai", "multi-agent", "pipedrive", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "aiohttp>=3.9.0",
    "celery>=5.3.0",
    "redis>=5.0.0",
    "agno>=0.1.0",
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    "python-dotenv>=1.0.0",
    "python-multipart>=0.0.6",
    "email-validator>=2.1.0",
    "bcrypt>=4.1.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.0",
    "structlog>=23.2.0",
    "tenacity>=8.2.0",
    "httpx>=0.25.0",
    "pillow>=10.1.0",
    "pdf2image>=1.17.0",
    "pytesseract>=0.3.0",
    "python-magic>=0.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "httpx>=0.25.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/aicrm/ai-crm-multi-agent"
Repository = "https://github.com/aicrm/ai-crm-multi-agent"
Documentation = "https://aicrm.github.io/ai-crm-multi-agent"
"Bug Tracker" = "https://github.com/aicrm/ai-crm-multi-agent/issues"

[tool.hatch.version]
path = "src/__init__.py"

[tool.black]
target-version = ["py311"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["E501", "ARG001", "ARG002", "ARG005", "S101"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-config",
    "--strict-markers",
    "--disable-warnings",
    "-ra",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "src/migrations/*",
    "src/config/local.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]